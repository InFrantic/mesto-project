(()=>{"use strict";var __webpack_modules__={740:()=>{eval("\n;// CONCATENATED MODULE: ./src/components/validate.js\nvar _excluded = [\"formSelector\"];\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nvar checkInputValidity = function checkInputValidity(formElement, inputElement, inputErrorClass, errorClass) {\n  if (inputElement.validity.patternMismatch) {\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n  } else {\n    inputElement.setCustomValidity(\"\");\n  }\n  if (!inputElement.validity.valid) {\n    showInputError(formElement, inputElement, inputElement.validationMessage, inputErrorClass, errorClass);\n  } else {\n    hideInputError(formElement, inputElement, inputErrorClass, errorClass);\n  }\n};\nvar showInputError = function showInputError(formElement, inputElement, errorMessage, inputErrorClass, errorClass) {\n  if (!inputElement) return;\n  inputElement.classList.add(inputErrorClass);\n  var errorElement = formElement.querySelector(\"#\".concat(inputElement.id, \"-error\"));\n  if (!errorElement) return;\n  errorElement.classList.add(errorClass);\n  errorElement.textContent = errorMessage;\n};\nvar hideInputError = function hideInputError(formElement, inputElement, inputErrorClass, errorClass) {\n  if (!inputElement) return;\n  var errorElement = formElement.querySelector(\"#\".concat(inputElement.id, \"-error\"));\n  inputElement.classList.remove(inputErrorClass);\n  if (!errorElement) return;\n  errorElement.classList.remove(errorClass);\n  errorElement.textContent = '';\n};\nvar toggleButtonState = function toggleButtonState(formElement, buttonElement, inactiveButtonClass) {\n  var isFormValid = formElement && formElement.checkValidity();\n  buttonElement.classList.toggle(inactiveButtonClass, !isFormValid);\n  buttonElement.disabled = !isFormValid;\n};\nfunction removeButtonState(buttonElement, inactiveButtonClass) {\n  toggleButtonState(false, buttonElement, inactiveButtonClass);\n}\nvar setEventListeners = function setEventListeners(formElement, _ref) {\n  var inputSelector = _ref.inputSelector,\n    submitButtonSelector = _ref.submitButtonSelector,\n    inactiveButtonClass = _ref.inactiveButtonClass,\n    inputErrorClass = _ref.inputErrorClass,\n    errorClass = _ref.errorClass;\n  var inputList = Array.from(formElement.querySelectorAll(inputSelector));\n  var buttonElement = formElement.querySelector(submitButtonSelector);\n  formElement.addEventListener('submit', function (e) {\n    e.preventDefault();\n    removeButtonState(buttonElement, inactiveButtonClass);\n  });\n  toggleButtonState(formElement, buttonElement, inactiveButtonClass);\n  inputList.forEach(function (inputElement) {\n    inputElement.addEventListener('input', function () {\n      checkInputValidity(formElement, inputElement, inputErrorClass, errorClass);\n      toggleButtonState(formElement, buttonElement, inactiveButtonClass);\n    });\n  });\n};\nvar enableValidation = function enableValidation(_ref2) {\n  var formSelector = _ref2.formSelector,\n    rest = _objectWithoutProperties(_ref2, _excluded);\n  var getFormList = Array.from(document.querySelectorAll(formSelector));\n  getFormList.forEach(function (formElement) {\n    formElement.addEventListener('submit', function (evt) {\n      evt.preventDefault();\n    });\n    setEventListeners(formElement, rest);\n  });\n};\n;// CONCATENATED MODULE: ./src/components/utils.js\nvar popups = document.querySelectorAll('.popup');\nvar editProfile = document.querySelector('.popup_editprof');\nvar popupAddElement = document.querySelector('.popup_elem');\nvar profileName = document.querySelector('#name');\nvar profileJob = document.querySelector('#job');\nvar profileFormAdd = document.querySelector('#profile');\nvar nameInput = document.querySelector('#username');\nvar jobInput = document.querySelector('#description');\nvar imgFullscreen = document.querySelector('.popup_full');\nvar titlePopup = imgFullscreen.querySelector('.popup__fullscreen-text');\nvar utils_elements = document.querySelector('.elements');\nvar utils_element = utils_elements.querySelector('.element');\nvar template = document.querySelector('#template');\nvar popupActiveClass = 'popup_opened';\nvar buttonSubmitElement = document.querySelector('.popup__save');\nvar templateElement = document.querySelector('#template').content;\nvar newElement = templateElement.querySelector('.element').cloneNode(true);\nvar elementImage = newElement.querySelector('#image');\nvar likeCount = newElement.querySelector('.element__likes-count');\nvar deleteBtn = newElement.querySelector('#delete');\nvar editAvatar = document.querySelector('.popup_avatar');\nvar changeAvatar = document.querySelector('#avatar');\nvar avatarInput = document.querySelector('#inputavatar');\nvar profileAvatar = document.querySelector('.profile__avatar');\n;// CONCATENATED MODULE: ./src/components/api.js\nvar config = {\n  baseUrl: 'https://nomoreparties.co/v1/plus-cohort-25',\n  headers: {\n    authorization: '53c28d17-3f3f-4ac4-868e-9a47b851f277',\n    'Content-Type': 'application/json'\n  }\n};\nfunction onResponse(res) {\n  if (res.ok) {\n    return res.json();\n  } else {\n    return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n  }\n}\nfunction getInitialCards() {\n  return fetch(\"\".concat(config.baseUrl, \"/cards\"), {\n    method: 'GET',\n    headers: config.headers\n  }).then(onResponse);\n}\nfunction getUsersMe() {\n  return fetch(\"\".concat(config.baseUrl, \"/users/me\"), {\n    method: 'GET',\n    headers: config.headers\n  }).then(onResponse);\n}\n;\nfunction editUsersMe(body) {\n  return fetch(\"\".concat(config.baseUrl, \"/users/me\"), {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify(body)\n  }).then(onResponse);\n}\n;\nfunction addNewCard(body) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards\"), {\n    method: 'POST',\n    headers: config.headers,\n    body: JSON.stringify(body)\n  }).then(onResponse);\n}\nfunction deleteMyCard(cardId) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards/\").concat(cardId), {\n    method: \"DELETE\",\n    headers: config.headers\n  }).then(onResponse);\n}\n;\nfunction addLike(cardId) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards/likes/\").concat(cardId), {\n    method: \"PUT\",\n    headers: config.headers\n  }).then(onResponse);\n}\n;\nfunction removeLike(cardId) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards/likes/\").concat(cardId), {\n    method: \"DELETE\",\n    headers: config.headers\n  }).then(onResponse);\n}\n;\nfunction newAvatar(body) {\n  return fetch(\"\".concat(config.baseUrl, \"/users/me/avatar\"), {\n    method: \"PATCH\",\n    headers: config.headers,\n    body: JSON.stringify(body)\n  }).then(onResponse);\n}\n;\n;// CONCATENATED MODULE: ./src/components/modal.js\n\n\npopups.forEach(function (popup) {\n  var btnClose = popup.querySelector('.popup__close-button');\n  btnClose.addEventListener('click', function () {\n    return hidePopup(popup);\n  });\n});\nfunction showPopup(popup) {\n  popup.classList.add(popupActiveClass);\n  document.addEventListener('keydown', closeByEsc);\n}\nfunction hidePopup(popup) {\n  popup.classList.remove(popupActiveClass);\n  document.removeEventListener('keydown', closeByEsc);\n}\nvar buttonOpenAddCardPopup = document.querySelector('#addplace');\nvar buttonOpenEditProfilePopup = document.querySelector('#editprofile');\nvar buttonOPenEditAvatarPopup = document.querySelector('.profile__edit-avatar');\nfunction closeByEsc(evt) {\n  if (evt.key === \"Escape\") {\n    var popupOpened = document.querySelector('.popup_opened');\n    hidePopup(popupOpened);\n  }\n}\nprofileFormAdd.addEventListener('submit', function () {\n  setStatusButton({\n    buttonElement: buttonSubmitElement,\n    text: 'Сохраняем...',\n    disabled: true\n  });\n  editUsersMe({\n    name: nameInput.value,\n    about: jobInput.value\n  }).catch(function (err) {\n    console.log(err);\n  }).finally(function () {\n    setStatusButton({\n      buttonElement: buttonSubmitElement,\n      text: 'Сохранить',\n      disabled: false\n    });\n  }).then(function () {\n    getUsersMe().then(function (res) {\n      profileName.textContent = res.name;\n      profileJob.textContent = res.about;\n      hidePopup(editProfile);\n    }).catch(function (err) {\n      console.log(err);\n    });\n  });\n});\npopups.forEach(function (popup) {\n  popup.addEventListener('click', function (evt) {\n    if (evt.target.classList.contains(popupActiveClass)) {\n      hidePopup(popup);\n    }\n  });\n});\nbuttonOpenAddCardPopup.addEventListener('click', function () {\n  return showPopup(popupAddElement);\n});\nbuttonOpenEditProfilePopup.addEventListener('click', openEditProfilePopup);\nbuttonOPenEditAvatarPopup.addEventListener('click', function () {\n  return showPopup(editAvatar);\n});\nfunction openEditProfilePopup() {\n  nameInput.value = profileName.textContent;\n  jobInput.value = profileJob.textContent;\n  showPopup(editProfile);\n}\nfunction setStatusButton(_ref) {\n  var buttonElement = _ref.buttonElement,\n    text = _ref.text,\n    disabled = _ref.disabled;\n  if (disabled) {\n    buttonElement.disabled = 'disabled';\n  } else {\n    buttonElement.disabled = false;\n  }\n  buttonElement.textContent = text;\n}\nchangeAvatar.addEventListener('submit', function () {\n  setStatusButton({\n    buttonElement: buttonSubmitElement,\n    text: 'Сохраняем...',\n    disabled: true\n  });\n  newAvatar({\n    avatar: avatarInput.value\n  }).then(function () {\n    getUsersMe().then(function (res) {\n      profileAvatar.src = res.avatar;\n      hidePopup(editAvatar);\n    });\n  }).catch(function (err) {\n    console.error(err);\n  }).finally(function () {\n    setStatusButton({\n      buttonElement: buttonSubmitElement,\n      text: 'Сохранить',\n      disabled: false\n    });\n  });\n});\n;// CONCATENATED MODULE: ./src/components/card.js\n\n\n\nvar addElementSubmit = popupAddElement.querySelector('#newplace');\naddElementSubmit.addEventListener('submit', addElementCard);\nvar card_templateElement = document.querySelector('#template').content;\nfunction createElem(data, userId, cardId, ownerId) {\n  var _data$likes$length, _data$likes;\n  var newElement = card_templateElement.querySelector('.element').cloneNode(true);\n  var elementImage = newElement.querySelector('#image');\n  var deleteCardIcon = newElement.querySelector('#delete');\n  var likeCount = newElement.querySelector('.element__likes-count');\n  var likeCard = newElement.querySelector('.element__like');\n  likeCount.textContent = (_data$likes$length = (_data$likes = data.likes) === null || _data$likes === void 0 ? void 0 : _data$likes.length) !== null && _data$likes$length !== void 0 ? _data$likes$length : \"0\";\n  if (ownerId !== userId) {\n    deleteCardIcon.remove();\n  } else {\n    deleteCardIcon.addEventListener(\"click\", function () {\n      return card_deleteBtn(deleteCardIcon, cardId);\n    });\n  }\n  likeCard.addEventListener(\"click\", function () {\n    return likeBtn(likeCard, cardId);\n  });\n  if (data.likes && data.likes.find(function (like) {\n    return like._id === userId;\n  })) {\n    likeCard.classList.add(\"element__like_active\");\n  }\n  newElement.querySelector('#image').addEventListener(\"click\", function () {\n    openPopupElemShow(data);\n  });\n  newElement.querySelector('.element__text').textContent = data.name;\n  elementImage.src = data.link;\n  elementImage.alt = data.name;\n  addEventListener(newElement, data);\n  return newElement;\n}\nvar elemImg = imgFullscreen.querySelector('.popup__fullscreen');\nfunction openPopupElemShow(data) {\n  elemImg.src = data.link;\n  elemImg.alt = data.name;\n  titlePopup.textContent = data.name;\n  showPopup(imgFullscreen);\n}\n;\nfunction renderCard(data, ownerId, cardId, userId) {\n  utils_elements.prepend(createElem(data, ownerId, cardId, userId));\n}\nfunction addElementCard(evt) {\n  evt.preventDefault();\n  var addplace = evt.target.place.value;\n  var addLink = evt.target.link.value;\n  addNewCard({\n    name: addplace,\n    link: addLink\n  }).then(function (data) {\n    var ownerId = data.owner._id;\n    var userId = data.owner._id;\n    var cardId = data._id;\n    renderCard(data, ownerId, cardId, userId);\n    console.log(data, ownerId, cardId, userId);\n    evt.target.reset();\n    hidePopup(popupAddElement);\n  });\n}\nfunction card_deleteBtn(element, cardId) {\n  deleteMyCard(cardId).then(function () {\n    element.closest('.element').remove();\n  }).catch(function (err) {\n    console.log(err);\n  });\n}\nfunction likeBtn(element, cardId) {\n  var cardLike = element.closest('.element');\n  var likeCount = cardLike.querySelector('.element__likes-count');\n  if (element.classList.contains(\"element__like_active\")) {\n    removeLike(cardId).then(function (data) {\n      element.classList.remove(\"element__like_active\");\n      likeCount.textContent = data.likes.length;\n    }).catch(function (err) {\n      console.log(err);\n    });\n  } else {\n    addLike(cardId).then(function (data) {\n      element.classList.add('element__like_active');\n      likeCount.textContent = data.likes.length;\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }\n}\n;// CONCATENATED MODULE: ./src/components/index.js\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\nenableValidation({\n  formSelector: '.popup__content',\n  inputSelector: '.popup__input',\n  submitButtonSelector: '.popup__save',\n  inactiveButtonClass: 'popup__save_disabled',\n  inputErrorClass: 'popup__input-error',\n  errorClass: 'popup__input-error_active'\n});\nPromise.all([getUsersMe(), getInitialCards()]).then(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n    res = _ref2[0],\n    dataCard = _ref2[1];\n  profileName.textContent = res.name;\n  profileJob.textContent = res.about;\n  profileAvatar.src = res.avatar;\n  var userId = res._id;\n  dataCard.forEach(function (data) {\n    var ownerId = data.owner._id;\n    var cardId = data._id;\n    var elemCard = createElem(data, userId, cardId, ownerId);\n    utils_elements.append(elemCard);\n  });\n}).catch(function (err) {\n  console.log(err);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///740\n")}},__webpack_exports__={};__webpack_modules__[740]()})();